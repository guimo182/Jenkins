pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'proyecto-qa', description: 'nombre del docker')
        string(name: 'name_imagen', defaultValue: 'iproyecto-qa', description: 'nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '81', description: 'puerto a publicar')
    }

    environment {
        name_final = "${name_container}${tag_imagen}${puerto_imagen}"
    }

    stages {

        // Configuraci√≥n inicial sin permisos sudo
        stage('Configure Docker') {
            steps {
                script {
                    sh '''
                        echo "Comprobando acceso a Docker sin permisos sudo"
                        docker info
                    '''
                }
            }
        }

        // Detener y eliminar contenedores existentes
        stage('Stop and Remove') {
            steps {
                script {
                    sh '''
                        docker ps -a
                        docker stop ${name_final} || true
                        docker rm ${name_final} || true
                    '''
                }
            }
        }

        // Construir la imagen Docker desde tu repositorio local
        stage('Build') {
            steps {
                script {
                    sh '''
                        docker build -f jobs/dockerweb/Dockerfile -t ${name_imagen}:${tag_imagen} jobs/dockerweb/
                    '''
                }
            }
        }

        // Ejecutar el contenedor en el puerto configurado
        stage('Run') {
            steps {
                script {
                    sh '''
                        docker run -dp ${puerto_imagen}:80 --name ${name_final} ${name_imagen}:${tag_imagen}
                    '''
                }
            }
        }
    }
}
