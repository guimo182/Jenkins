pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'proyecto-qa', description: 'Nombre del contenedor')
        string(name: 'name_imagen', defaultValue: 'iproyecto-qa', description: 'Nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'Etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '81', description: 'Puerto a publicar')
    }

    environment {
        name_final = "${name_container}${tag_imagen}${puerto_imagen}"
    }

    stages {

        // Configurar permisos del socket de Docker
        stage('Configure Docker Permissions') {
            steps {
                script {
                    sh '''
                        # Asegurarse de que Jenkins pueda acceder al socket Docker sin permisos extra
                        chmod 666 /var/run/docker.sock
                        chown jenkins:docker /var/run/docker.sock
                    '''
                }
            }
        }

        stage('Stop and Remove') {
            when {
                expression {
                    DOCKER_EXIST = sh(returnStdout: true, script: "docker ps -q --filter name=${name_final}").trim()
                    return DOCKER_EXIST != ''
                }
            }
            steps {
                script {
                    sh '''
                        docker stop ${name_final}
                        docker rm ${name_final}
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    sh '''
                        docker build -f jobs/dockerweb/Dockerfile -t ${name_imagen}:${tag_imagen} jobs/dockerweb/
                    '''
                }
            }
        }

        stage('Run') {
            steps {
                script {
                    sh '''
                        docker run -dp ${puerto_imagen}:80 --name ${name_final} ${name_imagen}:${tag_imagen}
                    '''
                }
            }
        }
    }
}
